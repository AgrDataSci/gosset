pkgname <- "gosset"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
base::assign(".ExTimings", "gosset-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
function(x) {
  if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
  if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
  options(OutDec = '.')
  format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')

### * </HEADER>
library('gosset')

base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
cleanEx()
nameEx("crossvalidation")
### * crossvalidation

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: crossvalidation
### Title: Cross-validation
### Aliases: crossvalidation

### ** Examples


# Generalized Linear Models

data("airquality")

crossvalidation(Temp ~ Wind + Solar.R,
                data = airquality,
                k = 5,
                family = poisson())

########################################

# PlackettLuce Model
# beans data from PlackettLuce
library("PlackettLuce")

example("beans", package = "PlackettLuce")

G <- grouped_rankings(R, rep(seq_len(nrow(beans)), 4))

beans <- cbind(G, beans)

# take seasons as bins
k <- length(unique(beans$season))
folds <- as.integer(as.factor(beans$season))

crossvalidation(G ~ maxTN, 
                data = beans, 
                k = k, 
                folds = folds,
                alpha = 0.01, 
                minsize = 100)

########################################

# BradleyTerry Model
library("psychotree")
# Germany's Next Topmodel 2007 data from psychotree
data("Topmodel2007", package = "psychotree")

crossvalidation(preference ~ ., 
                data = Topmodel2007,
                k = 5)





base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("crossvalidation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("forward")
### * forward

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: forward
### Title: Forward stepwise regression for model selection
### Aliases: forward

### ** Examples


library("gnm")
library("doParallel")
library("abind")

data("airquality")

mod <- forward(Temp ~ .,
               data = airquality,
               k = 5,
               select.by = "AIC",
               family = poisson(link = "log"))


########################################
 
# breadwheat data
library("PlackettLuce")
library("doParallel")
library("abind")

data("breadwheat", package = "gosset")

# data frame into a object of class 'rankings' from PlackettLuce
G <- to_rankings(breadwheat, 
                 items = c(1:3), 
                 rankings = c(7:8),
                 type = "tricot",
                 grouped.rankings = TRUE)

# get some explanatory variables to include in the model
# we will calculate the temperature indices
# for the planting date to maturity (120 days)
covars <- temperature(breadwheat_temp,
                      day.one = breadwheat$planting_date,
                      span = 120)

# combine the grouped_rankings and the explanatory variables
data <- cbind(G, covars, breadwheat[c("lon","lat")])

# run forward selection
mod <- forward(G ~ ., 
               data = data, 
               k = 3, 
               ncores = 2,
               minsize = 50, 
               alpha = 0.01)
               



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("forward", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("plot_nodes")
### * plot_nodes

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: plot_nodes
### Title: Plot nodes from recursive partitioning trees
### Aliases: plot_nodes

### ** Examples

library("PlackettLuce")
library("qvcalc")
library("ggplot2")

data("breadwheat")

# convert the tricot rankings from breadwheat data
# into a object of class 'rankings'
names(breadwheat)

G <- to_rankings(breadwheat,
                 items = c(1:3),
                 rankings = c(7:8),
                 type = "tricot",
                 grouped.rankings = TRUE)

# combine grouped rankings with lon lat from wheat dataset
mydata <- cbind(G, breadwheat[c("lon","lat")])

# fit a pltree model using lon and lat
mod <- pltree(G ~ ., data = mydata)

# plot nodes
plot_nodes(mod)



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("plot_nodes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("pseudoR2")
### * pseudoR2

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: pseudoR2
### Title: Pseudo R-squared
### Aliases: pseudoR2

### ** Examples


data("airquality")

mod <- glm(Temp ~ Wind + Solar.R, 
           data = airquality, 
           family = poisson())

pseudoR2(mod)
 
#################################

# Compute pseudo R-squared on a validation sample

n <- nrow(airquality)

s <- sample(1:n, n * 0.7)

train <- airquality[s,]
test <- airquality[-s,]

mod <- glm(Temp ~ Wind + Solar.R,
           data = train,
           family = poisson())

pseudoR2(mod, newdata = test)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("pseudoR2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("rainfall")
### * rainfall

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: rainfall
### Title: Rainfall indices
### Aliases: rainfall

### ** Examples

# Compute indices using precipitation data from CHIRPS
# (http://chg.geog.ucsb.edu/data/chirps/)
# each row in breadwheat corresponds to the same rows in breadwheat_rain
data("breadwheat_rain", package = "gosset")
data("breadwheat", package = "gosset")

# The rainfall indices for the first 50 days after sowing
rainfall(breadwheat_rain, 
         day.one = breadwheat$planting_date, 
         span = 50)

########################################

# Add the first 7 days before sowing (residual precipitation)
rainfall(breadwheat_rain, 
         day.one = breadwheat$planting_date, 
         span = 50,
         days.before = 7)

########################################

# Compute indices using NASA POWER

library("nasapower")
library("raster")

rainfall(breadwheat[c("lon","lat")], 
         day.one = breadwheat$planting_date, 
         span = 50)
         



base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("rainfall", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("temperature")
### * temperature

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: temperature
### Title: Temperature indices
### Aliases: temperature

### ** Examples

# Compute indices using temperature data from MODIS MYD11A1
# (http://dx.doi.org/10.5067/MODIS/MYD11A2.006)
# each row in breadwheat corresponds to the same rows in breadwheat_temp,
# first layer is the day temperature and second layer is the night temperature

data("breadwheat_temp", package = "gosset")
data("breadwheat", package = "gosset")

# compute all temperature indices for the first 30 days in the plots
temperature(breadwheat_temp,
            day.one = breadwheat["planting_date"],
            span = 30)


########################################

# Temperature indices from NASA POWER

library("nasapower")
library("raster")

temperature(breadwheat[c("lon","lat")], 
            day.one = breadwheat["planting_date"], 
            span = 40)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("temperature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("to_paircomp")
### * to_paircomp

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: to_paircomp
### Title: Pairwise comparison rankings
### Aliases: to_paircomp

### ** Examples


# a simple matrix with 4 items
# ties are computed as NA's 
R <- matrix(c(1, 2, 0, 0,
              4, 1, 2, 3,
              2, 4, 3, 1,
              1, 2, 3, 0,
              2, 1, 1, 0,
              1, 0, 3, 2), nrow = 6, byrow = TRUE)
colnames(R) <- c("apple", "banana", "orange", "pear")
R <- as.rankings(R)

to_paircomp(R)

#############################################

# using breadwheat data
data("breadwheat", package = "gosset")

# convert the tricot rankings from breadwheat data
# into a object of class 'rankings' from PlackettLuce
R <- to_rankings(breadwheat,
                 items = c(1:3),
                 rankings = c(7:8),
                 type = "tricot")


to_paircomp(R)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("to_paircomp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("to_rankings")
### * to_rankings

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: to_rankings
### Title: Plackett-Luce rankings
### Aliases: to_rankings

### ** Examples


# A matrix with 10 rankings of 5 items (A, B, C, D, E)
# with numeric values as "rank"
set.seed(123)
df <- cbind(id = rep(1:10, each = 5),
            items = rep(LETTERS[1:5], times = 10),
            rankings = runif(50, 1, 3))
df

# return a 'rankings' object
to_rankings(df,
            items = 2,
            rankings = 3,
            id = 1)

# return a 'grouped_rankings' object
to_rankings(df,
            items = 2,
            rankings = 3,
            id = 1,
            grouped.rankings = TRUE)

##################################

# Rankings with 5 items randomly assigned

i <- as.data.frame(matrix(NA, nrow = 10, ncol = 5))
names(i) <- paste0("Item",1:5)

r <- as.data.frame(matrix(NA, nrow = 10, ncol = 5))
names(r) <- paste0("Position_Item",1:5)

for(s in 1:10) {
  i[s,] <- sample(LETTERS[1:5])
  r[s,] <- sample(1:5)
}

cbind(i, r) 


to_rankings(items = i,
            rankings = r)

###################################

# breadwheat data, which is an object ordered in the 'tricot' format
# each observer compares 3 varieties randomly distributed from a list of 16 
data("breadwheat", package = "gosset")

to_rankings(breadwheat,
            items = c("variety_a","variety_b","variety_c"),
            rankings = c("best","worst"),
            type = "tricot")

######################

# beans data which is an object ordered in the 'tricot'format
# each observer compares 3 varieties randomly distributed from a list of 11
# and additionally compares these 3 varieties with their local variety
library("PlackettLuce")
data("beans", package = "PlackettLuce")

# comparison with local item is added as an additional rankings, then
# each of the 3 varieties are compared separately with the local item,
# it return a object four times larger (in rows) than the input data
# combining this with covariates from other dataset is easy since 
# the function keeps an internal id
to_rankings(beans,
            items = c(1:3),
            rankings = c(4:5),
            local = c(6:8),
            type = "tricot",
            grouped.rankings = TRUE)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("to_rankings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
cleanEx()
nameEx("worst_regret")
### * worst_regret

flush(stderr()); flush(stdout())

base::assign(".ptime", proc.time(), pos = "CheckExEnv")
### Name: worst_regret
### Title: Worst regret in regret-based models from recursive partitioning
###   trees
### Aliases: worst_regret

### ** Examples


library("PlackettLuce")

data("breadwheat", package = "gosset")

# convert the tricot rankings from breadwheat data
# into a object of class 'rankings'
names(breadwheat)

G <- to_rankings(breadwheat,
                 items = c(1:3),
                 rankings = c(7:8),
                 type = "tricot",
                 grouped.rankings = TRUE)


# compute temperature indices for the first 45 days in the plots
temp <- temperature(breadwheat_temp,
                    day.one = breadwheat["planting_date"],
                    span = 45)


# combine grouped rankings with temperature indices
mydata <- cbind(G, temp)

# fit a pltree model using temperature data
mod <- pltree(G ~ ., data = mydata)


worst_regret(mod)




base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
base::cat("worst_regret", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
### * <FOOTER>
###
options(digits = 7L)
base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
grDevices::dev.off()
###
### Local variables: ***
### mode: outline-minor ***
### outline-regexp: "\\(> \\)?### [*]+" ***
### End: ***
quit('no')
